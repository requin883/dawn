<div class="grid place-items-start md:place-items-center dropdown-container w-full h-auto">
  <details class="hamburger-menu">
    <summary
      class="header__icon header__icon--menu header__icon--summary link focus-inset"
      aria-label="{{ 'sections.header.menu' | t }}"
    >
      <span class="w-[30%] icon-container">
        {% render 'icon-hamburger-2' %}
        {% render 'icon-close-2' %}
      </span>
    </summary>
    <div class="md:grid md:grid-flow-col md:place-items-center md:gap-20 ">
    {% for link in section.settings.menu.links %}
      <details class="mt-[1rem] md:mt-0 underlined-container-{{ forloop.index }} {% if forloop.index == 3 %}mb-[1rem] md:mb-0{% endif %}">
        <summary class="md:hover:underline underlined-summary-{{ forloop.index }} md:hover:decoration-4 md:hover:underline-offset-[2rem] md:hover:decoration-blue-600">{{ link.title }}</summary>
        {% for childlink in link.links %}
          <details class="childlink-container">
            <summary>{{ childlink.title }}</summary>
            <ul class="grandchildlink-container">
              {% for grandchildlink in childlink.links %}
                <a href='{{ grandchildlink.url }}'><li>{{ grandchildlink.title }}</li></a>
              {% endfor %}
            </ul>
          </details>
        {% endfor %}
      </details>
    {% endfor %}
    </div>
  </details>
</div>
{% stylesheet %}
  ul {
    list-style: none;
  }
  
  .dropdown-container,
  .childlink-container,
  .grandchildlink-container {
    margin-left: 1rem;
  }
  .hamburger-menu[open] .icon-hamburger-2 {
    display: none;
  }
  .hamburger-menu .icon-hamburger-2 {
    display: block;
  }
  .hamburger-menu[open] .icon-close-2 {
    display: block;
  }
  .hamburger-menu .icon-close-2 {
    display: none;
  }
  @media screen and (min-width: 750px) {
    .icon-container{
      display: none !important;
    }
  .underlined-container[open] .underlined-summary{
    text-decoration-line: none !important;
  }
  }
{% endstylesheet %}
{% javascript %}
  const dropdownMenu = document.querySelector('.dropdown-container');
  const hamburgerMenu = document.getElementsByClassName('hamburger-menu');
  const hamburgerMenuQuery = document.querySelector('.hamburger-menu');
  const iconHamburgerBtn = document.getElementsByClassName('icon-hamburger-2');
  const iconCloseBtn = document.getElementsByClassName('icon-close-2');
  const underlinedContainer1 = document.querySelector('.underlined-container-1');
  const underlinedContainer2 = document.querySelector('.underlined-container-2');
  const underlinedContainer3 = document.querySelector('.underlined-container-3');
  const underlinedSummary1 = document.querySelector('.underlined-summary-1');
  const underlinedSummary2 = document.querySelector('.underlined-summary-2');
  const underlinedSummary3 = document.querySelector('.underlined-summary-3');

  const setAttributes = (summary,container)=>{
      summary.addEventListener('mouseover',()=>{
        container.setAttribute('open',true)
      })
      summary.addEventListener('mouseout',()=>{
        console.log("fired")
        container.setAttribute('open',null)
      })
  }
  
  const resizeObserver = new ResizeObserver((entries) => {
    for (const entry of entries) {
      if (entry.contentRect.width >= 750){
        setAttributes(underlinedSummary1,underlinedContainer1);
        setAttributes(underlinedSummary2,underlinedContainer2);
        setAttributes(underlinedSummary3,underlinedContainer3);
        hamburgerMenuQuery.setAttribute('open', true);
      }
    }
  })
  resizeObserver.observe(dropdownMenu)
{% endjavascript %}
{% schema %}
{
  "name": "nav-bar",
  "class": "section",
  "settings": [
    {
      "type": "link_list",
      "id": "menu",
      "label": "Menu"
    }
  ]
}
{% endschema %}
